[
    {
        "id": 42,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "What is the type of education offered in the school who scored the highest average in Math?",
        "sql": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 91,
            "word_length": 17,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "highest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 124,
            "tables_count": 2,
            "tables": [
                "satscores",
                "schools"
            ],
            "join_count": 1,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 17,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
        "sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
        "evidence": "Valid charter number means the number is not null",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 114,
            "word_length": 19,
            "entities": [
                {
                    "text": "Rank",
                    "label": "ORG",
                    "start": 0,
                    "end": 4
                },
                {
                    "text": "Writing",
                    "label": "GPE",
                    "start": 39,
                    "end": 46
                },
                {
                    "text": "499",
                    "label": "CARDINAL",
                    "start": 79,
                    "end": 82
                }
            ],
            "entity_types": [
                "GPE",
                "ORG",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "499"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "greater"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 215,
            "tables_count": 2,
            "tables": [
                "satscores",
                "schools"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 1,
            "clause_types": [
                "ORDER BY"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 3
        }
    },
    {
        "id": 20,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
        "sql": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 77,
            "word_length": 17,
            "entities": [
                {
                    "text": "Amador",
                    "label": "ORG",
                    "start": 20,
                    "end": 26
                },
                {
                    "text": "9",
                    "label": "CARDINAL",
                    "start": 50,
                    "end": 51
                },
                {
                    "text": "12",
                    "label": "CARDINAL",
                    "start": 74,
                    "end": 76
                }
            ],
            "entity_types": [
                "ORG",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "9",
                "12"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 173,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 86,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
        "sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 178,
            "word_length": 31,
            "entities": [
                {
                    "text": "40",
                    "label": "CARDINAL",
                    "start": 83,
                    "end": 85
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "40"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 4,
            "column_overlap_lemma_count": 4
        },
        "sql_analysis": {
            "char_length": 81,
            "tables_count": 1,
            "tables": [
                "schools"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 4
        }
    },
    {
        "id": 16,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "How many schools in merged Alameda have number of test takers less than 100?",
        "sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 76,
            "word_length": 14,
            "entities": [
                {
                    "text": "Alameda",
                    "label": "GPE",
                    "start": 27,
                    "end": 34
                },
                {
                    "text": "less than 100",
                    "label": "CARDINAL",
                    "start": 62,
                    "end": 75
                }
            ],
            "entity_types": [
                "GPE",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "100"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "less"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 171,
            "tables_count": 2,
            "tables": [
                "satscores",
                "schools"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 3,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
        "sql": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 109,
            "word_length": 18,
            "entities": [
                {
                    "text": "FRPM",
                    "label": "ORG",
                    "start": 80,
                    "end": 84
                },
                {
                    "text": "K-12",
                    "label": "PRODUCT",
                    "start": 95,
                    "end": 99
                }
            ],
            "entity_types": [
                "ORG",
                "PRODUCT"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "highest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 4
        },
        "sql_analysis": {
            "char_length": 133,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 60,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?",
        "sql": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1",
        "evidence": "Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 93,
            "word_length": 15,
            "entities": [
                {
                    "text": "San Joaquin",
                    "label": "GPE",
                    "start": 81,
                    "end": 92
                }
            ],
            "entity_types": [
                "GPE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 4
        },
        "sql_analysis": {
            "char_length": 90,
            "tables_count": 1,
            "tables": [
                "schools"
            ],
            "join_count": 0,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 73,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?",
        "sql": "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 137,
            "word_length": 28,
            "entities": [
                {
                    "text": "ages 5 to 17",
                    "label": "DATE",
                    "start": 49,
                    "end": 61
                },
                {
                    "text": "the Youth Authority School",
                    "label": "ORG",
                    "start": 65,
                    "end": 91
                },
                {
                    "text": "PO Box",
                    "label": "ORG",
                    "start": 125,
                    "end": 131
                },
                {
                    "text": "1040",
                    "label": "DATE",
                    "start": 132,
                    "end": 136
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "5",
                "17",
                "1040"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 184,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 61,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?",
        "sql": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'",
        "evidence": "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 102,
            "word_length": 17,
            "entities": [
                {
                    "text": "Hickman",
                    "label": "ORG",
                    "start": 50,
                    "end": 57
                },
                {
                    "text": "the Elementary School District",
                    "label": "ORG",
                    "start": 71,
                    "end": 101
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 85,
            "tables_count": 1,
            "tables": [
                "schools"
            ],
            "join_count": 0,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 2,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
        "sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
        "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 89,
            "word_length": 16,
            "entities": [
                {
                    "text": "Fresno County Office of Education",
                    "label": "ORG",
                    "start": 55,
                    "end": 88
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 4
        },
        "sql_analysis": {
            "char_length": 178,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 71,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
        "sql": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0",
        "evidence": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 100,
            "word_length": 20,
            "entities": [
                {
                    "text": "School",
                    "label": "ORG",
                    "start": 34,
                    "end": 40
                },
                {
                    "text": "Fresno",
                    "label": "GPE",
                    "start": 93,
                    "end": 99
                }
            ],
            "entity_types": [
                "GPE",
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": true,
            "negation_words": [
                "not"
            ],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 4,
            "column_overlap_lemma_count": 4
        },
        "sql_analysis": {
            "char_length": 136,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 134,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
        "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
        "evidence": "A16 stands for no. of committed crimes 1996",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 103,
            "word_length": 18,
            "entities": [
                {
                    "text": "1996",
                    "label": "DATE",
                    "start": 67,
                    "end": 71
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1996"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "largest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 152,
            "tables_count": 2,
            "tables": [
                "district",
                "account"
            ],
            "join_count": 1,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 133,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "sql": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
        "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 106,
            "word_length": 16,
            "entities": [
                {
                    "text": "1996",
                    "label": "DATE",
                    "start": 3,
                    "end": 7
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1996"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "highest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 62,
            "tables_count": 1,
            "tables": [
                "district"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 141,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "Which districts have transactions greater than USS$10,000 in 1997?",
        "sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 66,
            "word_length": 9,
            "entities": [
                {
                    "text": "1997",
                    "label": "DATE",
                    "start": 61,
                    "end": 65
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1997"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "greater"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 250,
            "tables_count": 3,
            "tables": [
                "district",
                "trans",
                "account"
            ],
            "join_count": 2,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "GROUP BY",
                "HAVING"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 179,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
        "sql": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 82,
            "word_length": 16,
            "entities": [
                {
                    "text": "617",
                    "label": "CARDINAL",
                    "start": 38,
                    "end": 41
                },
                {
                    "text": "1998",
                    "label": "DATE",
                    "start": 77,
                    "end": 81
                }
            ],
            "entity_types": [
                "DATE",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "617",
                "1998"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 267,
            "tables_count": 4,
            "tables": [
                "disp",
                "client",
                "trans",
                "account"
            ],
            "join_count": 3,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 181,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "Please provide the IDs of the 3 female clients with the largest loans.",
        "sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
        "evidence": "Female refers to gender = 'F'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 70,
            "word_length": 13,
            "entities": [
                {
                    "text": "3",
                    "label": "CARDINAL",
                    "start": 30,
                    "end": 31
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "3"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "largest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 291,
            "tables_count": 4,
            "tables": [
                "disp",
                "client",
                "loan",
                "account"
            ],
            "join_count": 3,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 172,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "sql": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 95,
            "word_length": 16,
            "entities": [
                {
                    "text": "1",
                    "label": "CARDINAL",
                    "start": 72,
                    "end": 73
                },
                {
                    "text": "10",
                    "label": "CARDINAL",
                    "start": 92,
                    "end": 94
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "1",
                "10"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 96,
            "tables_count": 1,
            "tables": [
                "disp"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 2
        }
    },
    {
        "id": 96,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "How many customers who choose statement of weekly issuance are Owner?",
        "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 69,
            "word_length": 11,
            "entities": [
                {
                    "text": "weekly",
                    "label": "DATE",
                    "start": 43,
                    "end": 49
                },
                {
                    "text": "Owner",
                    "label": "ORG",
                    "start": 63,
                    "end": 68
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 161,
            "tables_count": 2,
            "tables": [
                "disp",
                "account"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 142,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "Which accounts placed orders for household payment in Pisek?",
        "sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
        "evidence": "k_symbol = 'SIPO' refers to household payment",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 60,
            "word_length": 9,
            "entities": [
                {
                    "text": "Pisek",
                    "label": "GPE",
                    "start": 54,
                    "end": 59
                }
            ],
            "entity_types": [
                "GPE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 212,
            "tables_count": 3,
            "tables": [
                "district",
                "trans",
                "account"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 191,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
        "sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 102,
            "word_length": 18,
            "entities": [
                {
                    "text": "24 months",
                    "label": "DATE",
                    "start": 58,
                    "end": 67
                },
                {
                    "text": "weekly",
                    "label": "DATE",
                    "start": 73,
                    "end": 79
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "24"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 160,
            "tables_count": 2,
            "tables": [
                "loan",
                "account"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 91,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "sql": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 81,
            "word_length": 13,
            "entities": [
                {
                    "text": "1995",
                    "label": "DATE",
                    "start": 34,
                    "end": 38
                },
                {
                    "text": "1996",
                    "label": "DATE",
                    "start": 43,
                    "end": 47
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1995",
                "1996",
                "one"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "higher"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 70,
            "tables_count": 1,
            "tables": [
                "district"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 110,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "sql": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 83,
            "word_length": 16,
            "entities": [
                {
                    "text": "5100 USD transaction",
                    "label": "QUANTITY",
                    "start": 50,
                    "end": 70
                },
                {
                    "text": "1998/9/2",
                    "label": "DATE",
                    "start": 74,
                    "end": 82
                }
            ],
            "entity_types": [
                "QUANTITY",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "5100"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 195,
            "tables_count": 3,
            "tables": [
                "disp",
                "trans",
                "account"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 309,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
        "sql": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 111,
            "word_length": 23,
            "entities": [
                {
                    "text": "TR346",
                    "label": "FAC",
                    "start": 41,
                    "end": 46
                }
            ],
            "entity_types": [
                "FAC"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 3,
            "table_overlap_lemma_count": 3,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 200,
            "tables_count": 2,
            "tables": [
                "bond",
                "atom"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 1,
            "clause_types": [
                "GROUP BY"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 3
        }
    },
    {
        "id": 293,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "How many atoms belong to the molecule labeled with carcinogenic compounds?",
        "sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 74,
            "word_length": 11,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 122,
            "tables_count": 2,
            "tables": [
                "atom",
                "molecule"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 238,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "How many molecules have a triple bond type?",
        "sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "evidence": "triple bond refers to bond_type = '#';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 43,
            "word_length": 8,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 75,
            "tables_count": 1,
            "tables": [
                "bond"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 271,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
        "sql": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')",
        "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 64,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 205,
            "tables_count": 2,
            "tables": [
                "atom",
                "connected"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 3
        }
    },
    {
        "id": 296,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.",
        "sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 98,
            "word_length": 18,
            "entities": [
                {
                    "text": "first",
                    "label": "ORDINAL",
                    "start": 73,
                    "end": 78
                },
                {
                    "text": "TR000_1",
                    "label": "ORG",
                    "start": 90,
                    "end": 97
                }
            ],
            "entity_types": [
                "ORDINAL",
                "ORG"
            ],
            "has_entities": true,
            "numbers": [
                "first"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 3,
            "table_overlap_lemma_count": 3,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 173,
            "tables_count": 2,
            "tables": [
                "bond",
                "connected"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 3
        }
    },
    {
        "id": 210,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "What atoms are connected in single type bonds?",
        "sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "evidence": "single type bond refers to bond_type = '-';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 46,
            "word_length": 8,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 125,
            "tables_count": 2,
            "tables": [
                "bond",
                "connected"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 217,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
        "sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
        "evidence": "TR181 molecule refers to molecule_id = 'TR181'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 77,
            "word_length": 14,
            "entities": [
                {
                    "text": "TR181",
                    "label": "FAC",
                    "start": 62,
                    "end": 67
                }
            ],
            "entity_types": [
                "FAC"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 131,
            "tables_count": 2,
            "tables": [
                "atom",
                "connected"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 315,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?",
        "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 79,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 150,
            "tables_count": 2,
            "tables": [
                "atom",
                "molecule"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 214,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "What type of label is not on molecules with atoms with tin?",
        "sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 59,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": true,
            "negation_words": [
                "not"
            ],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 126,
            "tables_count": 2,
            "tables": [
                "atom",
                "molecule"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 199,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
        "sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "evidence": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 71,
            "word_length": 11,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 157,
            "tables_count": 2,
            "tables": [
                "atom",
                "molecule"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 335,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "What is the total number of molecules with double bonded oxygen?",
        "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'",
        "evidence": "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 64,
            "word_length": 11,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 156,
            "tables_count": 2,
            "tables": [
                "bond",
                "atom"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 447,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "Give the code of sets have expansion commander type?",
        "sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "evidence": "code of sets refers to setCode",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 52,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 119,
            "tables_count": 2,
            "tables": [
                "sets",
                "set_translations"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 396,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?",
        "sql": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1",
        "evidence": "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 97,
            "word_length": 17,
            "entities": [
                {
                    "text": "1993",
                    "label": "DATE",
                    "start": 22,
                    "end": 26
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1993"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 106,
            "tables_count": 1,
            "tables": [
                "cards"
            ],
            "join_count": 0,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 365,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What is the type of card \"Benalish Knight\"?",
        "sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "evidence": "Benalish Knight' is the name of card;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 43,
            "word_length": 8,
            "entities": [
                {
                    "text": "Benalish Knight",
                    "label": "WORK_OF_ART",
                    "start": 26,
                    "end": 41
                }
            ],
            "entity_types": [
                "WORK_OF_ART"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 125,
            "tables_count": 2,
            "tables": [
                "cards",
                "foreign_data"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 355,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What is the keyword found on card 'Angel of Mercy'?",
        "sql": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "evidence": "Angel of Mercy' is the name of card;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 51,
            "word_length": 10,
            "entities": [
                {
                    "text": "Angel of Mercy'",
                    "label": "WORK_OF_ART",
                    "start": 35,
                    "end": 50
                }
            ],
            "entity_types": [
                "WORK_OF_ART"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 65,
            "tables_count": 1,
            "tables": [
                "cards"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 389,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "sql": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "evidence": "Creature - Elf is the originalType;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 106,
            "word_length": 20,
            "entities": [
                {
                    "text": "Creature - Elf",
                    "label": "ORG",
                    "start": 51,
                    "end": 65
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 125,
            "tables_count": 2,
            "tables": [
                "rulings",
                "cards"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 420,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "How many cards are oversized, reprinted, and printed for promotions?",
        "sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "evidence": "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 68,
            "word_length": 10,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 83,
            "tables_count": 1,
            "tables": [
                "cards"
            ],
            "join_count": 0,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 343,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
        "sql": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
        "evidence": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 65,
            "word_length": 12,
            "entities": [
                {
                    "text": "2015",
                    "label": "DATE",
                    "start": 20,
                    "end": 24
                },
                {
                    "text": "below 100",
                    "label": "CARDINAL",
                    "start": 45,
                    "end": 54
                }
            ],
            "entity_types": [
                "DATE",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "2015",
                "100"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 67,
            "tables_count": 1,
            "tables": [
                "cards"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 454,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "Among the cards with a white border color, how many of them have unknown power?",
        "sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'",
        "evidence": "unknown power refers to power = '*' or power is null",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 79,
            "word_length": 15,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 112,
            "tables_count": 1,
            "tables": [
                "cards"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 451,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "How many cards available in paper have a positive starting maximum hand size?",
        "sql": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards",
        "evidence": "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '3'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 77,
            "word_length": 13,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 88,
            "tables_count": 1,
            "tables": [
                "cards"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 418,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What kind of printing is on the card that Daren Bader created?",
        "sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 62,
            "word_length": 12,
            "entities": [
                {
                    "text": "Daren Bader",
                    "label": "PERSON",
                    "start": 42,
                    "end": 53
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 68,
            "tables_count": 1,
            "tables": [
                "cards"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 449,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What is the language of the card that has azorius watermark? List out the type of this card.",
        "sql": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 92,
            "word_length": 18,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 135,
            "tables_count": 2,
            "tables": [
                "cards",
                "foreign_data"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 684,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Identify the percentage of teenage users.",
        "sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
        "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 41,
            "word_length": 6,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 87,
            "tables_count": 1,
            "tables": [
                "users"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 618,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "sql": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "evidence": "\"Vienna, Austria\" is the Location",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 76,
            "word_length": 14,
            "entities": [
                {
                    "text": "Vienna",
                    "label": "GPE",
                    "start": 41,
                    "end": 47
                },
                {
                    "text": "Austria",
                    "label": "GPE",
                    "start": 49,
                    "end": 56
                }
            ],
            "entity_types": [
                "GPE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 113,
            "tables_count": 2,
            "tables": [
                "badges",
                "users"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 559,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Indicate the creation date of the maximum number of votes.",
        "sql": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
        "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 58,
            "word_length": 10,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 84,
            "tables_count": 1,
            "tables": [
                "votes"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 676,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Please list all display names of users who are adults.",
        "sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "evidence": "adults refer to users where Age BETWEEN 19 and 65;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 54,
            "word_length": 10,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 57,
            "tables_count": 1,
            "tables": [
                "users"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 537,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "How many posts does the user csgillespie own?",
        "sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 45,
            "word_length": 8,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 122,
            "tables_count": 2,
            "tables": [
                "posts",
                "users"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 619,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "How many adults who obtained the badge Supporter?",
        "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
        "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 49,
            "word_length": 8,
            "entities": [
                {
                    "text": "Supporter",
                    "label": "PRODUCT",
                    "start": 39,
                    "end": 48
                }
            ],
            "entity_types": [
                "PRODUCT"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 138,
            "tables_count": 2,
            "tables": [
                "badges",
                "users"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 686,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Identify the total number of posts with views above average.",
        "sql": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
        "evidence": "views above average refer to ViewCount > AVG(ViewCount);",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 60,
            "word_length": 10,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 75,
            "tables_count": 1,
            "tables": [
                "posts"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 645,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "How many negative comments were given by user ID 13?",
        "sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
        "evidence": "negative comments refer to Score < 60;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 52,
            "word_length": 10,
            "entities": [
                {
                    "text": "ID 13",
                    "label": "PRODUCT",
                    "start": 46,
                    "end": 51
                }
            ],
            "entity_types": [
                "PRODUCT"
            ],
            "has_entities": true,
            "numbers": [
                "13"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 63,
            "tables_count": 1,
            "tables": [
                "comments"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 697,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "sql": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 106,
            "word_length": 21,
            "entities": [
                {
                    "text": "Jarrod Dixon",
                    "label": "PERSON",
                    "start": 92,
                    "end": 104
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 70,
            "tables_count": 1,
            "tables": [
                "users"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 609,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "How many posts have a score of 10 on the list?",
        "sql": "SELECT COUNT(id) FROM posts WHERE Score = 10",
        "evidence": "score of 10 refers to Score = 10; post refers to Id",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 46,
            "word_length": 11,
            "entities": [
                {
                    "text": "10",
                    "label": "CARDINAL",
                    "start": 31,
                    "end": 33
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "10"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 44,
            "tables_count": 1,
            "tables": [
                "posts"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 538,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Please list the titles of the posts owned by the user csgillespie?",
        "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 66,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 118,
            "tables_count": 2,
            "tables": [
                "posts",
                "users"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 731,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "How many superheroes did DC Comics publish?",
        "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "evidence": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 43,
            "word_length": 7,
            "entities": [
                {
                    "text": "DC Comics",
                    "label": "ORG",
                    "start": 25,
                    "end": 34
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 132,
            "tables_count": 2,
            "tables": [
                "superhero",
                "publisher"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 771,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "List the name of superheroes with flight power.",
        "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 47,
            "word_length": 8,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 177,
            "tables_count": 3,
            "tables": [
                "superhero",
                "superpower",
                "hero_power"
            ],
            "join_count": 2,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 738,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "Which superheroes have a durability attribute value of less than 50?",
        "sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 68,
            "word_length": 11,
            "entities": [
                {
                    "text": "less than 50",
                    "label": "CARDINAL",
                    "start": 55,
                    "end": 67
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "50"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "less"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 236,
            "tables_count": 3,
            "tables": [
                "superhero",
                "attribute",
                "hero_attribute"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 833,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "Name the superhero, otherwise known as Charles Chandler.",
        "sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 56,
            "word_length": 8,
            "entities": [
                {
                    "text": "Charles Chandler",
                    "label": "PERSON",
                    "start": 39,
                    "end": 55
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 73,
            "tables_count": 1,
            "tables": [
                "superhero"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 755,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "List down at least five full name of Demi-God superheroes.",
        "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 58,
            "word_length": 11,
            "entities": [
                {
                    "text": "at least five",
                    "label": "CARDINAL",
                    "start": 10,
                    "end": 23
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "five"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "least"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 111,
            "tables_count": 2,
            "tables": [
                "superhero",
                "race"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 764,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "What are the superpowers of heroes with ID 1?",
        "sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 45,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [
                "1"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 123,
            "tables_count": 2,
            "tables": [
                "superpower",
                "hero_power"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 843,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "List the hero ID of superheroes have intellegence as their power.",
        "sql": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'",
        "evidence": "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 65,
            "word_length": 11,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 127,
            "tables_count": 2,
            "tables": [
                "superpower",
                "hero_power"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 725,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "How many superheroes are published by Marvel Comics?",
        "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 52,
            "word_length": 8,
            "entities": [
                {
                    "text": "Marvel Comics",
                    "label": "ORG",
                    "start": 38,
                    "end": 51
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 136,
            "tables_count": 2,
            "tables": [
                "superhero",
                "publisher"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 828,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "Count the fastest superheroes.",
        "sql": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100",
        "evidence": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 30,
            "word_length": 4,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "fastest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 223,
            "tables_count": 3,
            "tables": [
                "superhero",
                "attribute",
                "hero_attribute"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 837,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "Give the hero ID of superhero with the lowest attribute value.",
        "sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
        "evidence": "lowest attribute value refers to MIN(attribute_value);",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 62,
            "word_length": 11,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "lowest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 110,
            "tables_count": 1,
            "tables": [
                "hero_attribute"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "MIN"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 747,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "What is the total number of superheroes without full name?",
        "sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
        "evidence": "superheroes without full name refers to full_name IS NULL",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 58,
            "word_length": 10,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 55,
            "tables_count": 1,
            "tables": [
                "superhero"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 853,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "Please give the names of the races held on the circuits in Spain.",
        "sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
        "evidence": "Spain is a name of country;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 65,
            "word_length": 13,
            "entities": [
                {
                    "text": "Spain",
                    "label": "GPE",
                    "start": 59,
                    "end": 64
                }
            ],
            "entity_types": [
                "GPE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 124,
            "tables_count": 2,
            "tables": [
                "circuits",
                "races"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 966,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "How many driver participated in race ID number 18?",
        "sql": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 50,
            "word_length": 9,
            "entities": [
                {
                    "text": "18",
                    "label": "CARDINAL",
                    "start": 47,
                    "end": 49
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "18"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 61,
            "tables_count": 1,
            "tables": [
                "driverStandings"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 957,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "How many Italian drivers haven't finished the race?",
        "sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
        "evidence": "haven't finished the race refers to time is null;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 51,
            "word_length": 9,
            "entities": [
                {
                    "text": "Italian",
                    "label": "NORP",
                    "start": 9,
                    "end": 16
                }
            ],
            "entity_types": [
                "NORP"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": true,
            "negation_words": [
                "n't"
            ],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 151,
            "tables_count": 2,
            "tables": [
                "drivers",
                "results"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 941,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
        "sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 91,
            "word_length": 16,
            "entities": [
                {
                    "text": "Lewis Hamilton",
                    "label": "PERSON",
                    "start": 20,
                    "end": 34
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 150,
            "tables_count": 2,
            "tables": [
                "drivers",
                "results"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 917,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "Which website should I go to if I want to know more about Anthony Davidson?",
        "sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "evidence": "website refers to url",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 75,
            "word_length": 15,
            "entities": [
                {
                    "text": "Anthony Davidson",
                    "label": "PERSON",
                    "start": 58,
                    "end": 74
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "more"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 75,
            "tables_count": 1,
            "tables": [
                "drivers"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 859,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
        "sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 62,
            "word_length": 13,
            "entities": [
                {
                    "text": "Bruno Senna's",
                    "label": "PERSON",
                    "start": 7,
                    "end": 20
                },
                {
                    "text": "354",
                    "label": "CARDINAL",
                    "start": 58,
                    "end": 61
                }
            ],
            "entity_types": [
                "PERSON",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "354"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 161,
            "tables_count": 2,
            "tables": [
                "qualifying",
                "drivers"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1010,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
        "sql": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "evidence": "lap recod means the fastest time recorded which refers to time",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 65,
            "word_length": 13,
            "entities": [
                {
                    "text": "Lewis Hamilton",
                    "label": "PERSON",
                    "start": 30,
                    "end": 44
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 144,
            "tables_count": 2,
            "tables": [
                "lapTimes",
                "drivers"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 886,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "Which year has the most number of races?",
        "sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
        "evidence": "the most number of races refers to max(round);",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 40,
            "word_length": 8,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 71,
            "tables_count": 1,
            "tables": [
                "races"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 868,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
        "sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
        "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 66,
            "word_length": 10,
            "entities": [
                {
                    "text": "Malaysian",
                    "label": "NORP",
                    "start": 9,
                    "end": 18
                }
            ],
            "entity_types": [
                "NORP"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 143,
            "tables_count": 2,
            "tables": [
                "circuits",
                "races"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 875,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "Show me the season page of year when the race No. 901 took place.",
        "sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "evidence": "the season page refers to url; race number refers to raceId;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 65,
            "word_length": 14,
            "entities": [
                {
                    "text": "901",
                    "label": "CARDINAL",
                    "start": 50,
                    "end": 53
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "901"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 98,
            "tables_count": 2,
            "tables": [
                "races",
                "seasons"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 862,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 75,
            "word_length": 14,
            "entities": [
                {
                    "text": "the Bahrain Grand Prix",
                    "label": "EVENT",
                    "start": 4,
                    "end": 26
                },
                {
                    "text": "2007",
                    "label": "DATE",
                    "start": 30,
                    "end": 34
                }
            ],
            "entity_types": [
                "EVENT",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2007"
            ],
            "has_numbers": true,
            "has_negation": true,
            "negation_words": [
                "not"
            ],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 222,
            "tables_count": 3,
            "tables": [
                "races",
                "drivers",
                "results"
            ],
            "join_count": 2,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1054,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What is the defensive work rate of the football player David Wilson\n?",
        "sql": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 69,
            "word_length": 12,
            "entities": [
                {
                    "text": "David Wilson",
                    "label": "PERSON",
                    "start": 55,
                    "end": 67
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 168,
            "tables_count": 2,
            "tables": [
                "Player",
                "Player_Attributes"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1078,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
        "sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "evidence": "The larger the birthday value, the younger the person is, and vice versa;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 57,
            "word_length": 9,
            "entities": [
                {
                    "text": "Aaron Lennon",
                    "label": "PERSON",
                    "start": 23,
                    "end": 35
                },
                {
                    "text": "Abdelaziz Barrada",
                    "label": "ORG",
                    "start": 39,
                    "end": 56
                }
            ],
            "entity_types": [
                "ORG",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "older"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 119,
            "tables_count": 1,
            "tables": [
                "Player"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1133,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
        "sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
        "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 75,
            "word_length": 13,
            "entities": [
                {
                    "text": "the 1990s",
                    "label": "DATE",
                    "start": 37,
                    "end": 46
                },
                {
                    "text": "first",
                    "label": "ORDINAL",
                    "start": 56,
                    "end": 61
                },
                {
                    "text": "Aaron",
                    "label": "PERSON",
                    "start": 68,
                    "end": 73
                }
            ],
            "entity_types": [
                "ORDINAL",
                "DATE",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [
                "first"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 82,
            "tables_count": 1,
            "tables": [
                "Player"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1122,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "State the name of the most strongest player.",
        "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
        "evidence": "strongest players refers to player has MAX(overall_rating)",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 44,
            "word_length": 8,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most",
                "strongest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 200,
            "tables_count": 3,
            "tables": [
                "Player_Attributes)",
                "Player",
                "Player_Attributes"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "MAX"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1074,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "List all the short name of the football team that had a home team goal of 10?",
        "sql": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10",
        "evidence": "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 77,
            "word_length": 17,
            "entities": [
                {
                    "text": "10",
                    "label": "CARDINAL",
                    "start": 74,
                    "end": 76
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "10"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 133,
            "tables_count": 2,
            "tables": [
                "Match",
                "Team"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1064,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "List out of players whose preferred foot is left.",
        "sql": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "evidence": "preferred_foot = 'left';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 49,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 162,
            "tables_count": 2,
            "tables": [
                "Player",
                "Player_Attributes"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1140,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
        "sql": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
        "evidence": "Alexis Blin's refers to player_name = 'Alexis Blin'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 70,
            "word_length": 11,
            "entities": [
                {
                    "text": "Alexis Blin's",
                    "label": "PERSON",
                    "start": 9,
                    "end": 22
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 159,
            "tables_count": 2,
            "tables": [
                "Player",
                "Player_Attributes"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 3
        }
    },
    {
        "id": 1070,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "Which country is the league Italy Serie A from?",
        "sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
        "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 47,
            "word_length": 9,
            "entities": [
                {
                    "text": "Italy Serie",
                    "label": "ORG",
                    "start": 28,
                    "end": 39
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 114,
            "tables_count": 2,
            "tables": [
                "League",
                "Country"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1142,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?",
        "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
        "evidence": "In the 2015\u20132016 season refers to season = '2015/2016'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 82,
            "word_length": 15,
            "entities": [
                {
                    "text": "the 2015\u20132016 season",
                    "label": "DATE",
                    "start": 3,
                    "end": 23
                },
                {
                    "text": "the Italian Serie",
                    "label": "ORG",
                    "start": 55,
                    "end": 72
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 144,
            "tables_count": 2,
            "tables": [
                "Match",
                "League"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1077,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What's the long name for the team GEN?",
        "sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
        "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 38,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 61,
            "tables_count": 1,
            "tables": [
                "Team"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1119,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "How many home team goal have been scored by Aaron Lennon?",
        "sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
        "evidence": "Aaron Lennon refers to player_name = 'Aaron Lennon'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 57,
            "word_length": 11,
            "entities": [
                {
                    "text": "Aaron Lennon",
                    "label": "PERSON",
                    "start": 44,
                    "end": 56
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 147,
            "tables_count": 2,
            "tables": [
                "Player",
                "match"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1237,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.",
        "sql": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'",
        "evidence": "outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 103,
            "word_length": 17,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 134,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1210,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.",
        "sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "evidence": "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 135,
            "word_length": 21,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 47,
            "tables_count": 1,
            "tables": [
                "Laboratory"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1288,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "Please list the diagnosis of the patients whose total protein is lower than normal.",
        "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
        "evidence": "total protein is lower than normal refers to TP < 6.0;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 83,
            "word_length": 14,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "lower"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 101,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1310,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?",
        "sql": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'",
        "evidence": "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 98,
            "word_length": 16,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 115,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1228,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?",
        "sql": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300",
        "evidence": "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 111,
            "word_length": 18,
            "entities": [
                {
                    "text": "TG",
                    "label": "ORG",
                    "start": 64,
                    "end": 66
                },
                {
                    "text": "greater than 100",
                    "label": "CARDINAL",
                    "start": 74,
                    "end": 90
                }
            ],
            "entity_types": [
                "ORG",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "100"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "greater"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 108,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1230,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.",
        "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'",
        "evidence": "outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 94,
            "word_length": 14,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 127,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1184,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
        "sql": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 111,
            "word_length": 18,
            "entities": [
                {
                    "text": "1959/3/1",
                    "label": "DATE",
                    "start": 35,
                    "end": 43
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 157,
            "tables_count": 2,
            "tables": [
                "Examination",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1199,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?",
        "sql": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'",
        "evidence": "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 92,
            "word_length": 15,
            "entities": [
                {
                    "text": "1997",
                    "label": "DATE",
                    "start": 43,
                    "end": 47
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1997"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 99,
            "tables_count": 1,
            "tables": [
                "Laboratory"
            ],
            "join_count": 0,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1214,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.",
        "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
        "evidence": "total protein (TP) below the lower range of the normal index refers to TP < 6.0",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 109,
            "word_length": 21,
            "entities": [
                {
                    "text": "List ID",
                    "label": "ORG",
                    "start": 0,
                    "end": 7
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "lower"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 4,
            "column_overlap_lemma_count": 4
        },
        "sql_analysis": {
            "char_length": 124,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 3
        }
    },
    {
        "id": 1278,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "Of the patients with an normal level of IGG, how many of them admitted to the hospital?",
        "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG <2000 AND  T1.Admission = '+'",
        "evidence": "normal level of IGG refers to 900 < IGG < 2000; admitted to the hospital refers to Admission = '+';",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 87,
            "word_length": 17,
            "entities": [
                {
                    "text": "IGG",
                    "label": "ORG",
                    "start": 40,
                    "end": 43
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 143,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1282,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.",
        "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
        "evidence": "highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60);",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 112,
            "word_length": 17,
            "entities": [
                {
                    "text": "three",
                    "label": "CARDINAL",
                    "start": 20,
                    "end": 25
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "three"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "highest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 129,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1373,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "How many of the members' hometowns are from Maryland state?",
        "sql": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 59,
            "word_length": 10,
            "entities": [
                {
                    "text": "Maryland",
                    "label": "GPE",
                    "start": 44,
                    "end": 52
                }
            ],
            "entity_types": [
                "GPE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 122,
            "tables_count": 2,
            "tables": [
                "member",
                "zip_code"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1356,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "Which department was the President of the club in?",
        "sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "evidence": "'President' is a position of Student Club",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 50,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 127,
            "tables_count": 2,
            "tables": [
                "member",
                "major"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1344,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "What was the notes of the fundraising on 2019/9/14?",
        "sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 51,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 86,
            "tables_count": 1,
            "tables": [
                "income"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1408,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "Calculate the total cost spent for Parking in the list.",
        "sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
        "evidence": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 55,
            "word_length": 10,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 67,
            "tables_count": 1,
            "tables": [
                "expense"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1402,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "What is the most popular size of t-shirt ordered by the club members?",
        "sql": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
        "evidence": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 69,
            "word_length": 14,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 95,
            "tables_count": 1,
            "tables": [
                "member"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1330,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "What college offers the major that Tyler Hewitt took?",
        "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 53,
            "word_length": 9,
            "entities": [
                {
                    "text": "Tyler Hewitt",
                    "label": "PERSON",
                    "start": 35,
                    "end": 47
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 150,
            "tables_count": 2,
            "tables": [
                "member",
                "major"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1438,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
        "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 114,
            "word_length": 19,
            "entities": [
                {
                    "text": "first",
                    "label": "ORDINAL",
                    "start": 48,
                    "end": 53
                },
                {
                    "text": "Katy",
                    "label": "PERSON",
                    "start": 62,
                    "end": 66
                }
            ],
            "entity_types": [
                "ORDINAL",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [
                "first"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 164,
            "tables_count": 2,
            "tables": [
                "member",
                "major"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1436,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "Please provide links to events for members who have paid more than 50 dollar.",
        "sql": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
        "evidence": "have paid more than 50 dollar refers to cost > 50",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 77,
            "word_length": 14,
            "entities": [
                {
                    "text": "more than 50 dollar",
                    "label": "MONEY",
                    "start": 57,
                    "end": 76
                }
            ],
            "entity_types": [
                "MONEY"
            ],
            "has_entities": true,
            "numbers": [
                "50"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "more"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 194,
            "tables_count": 3,
            "tables": [
                "member",
                "attendance",
                "expense"
            ],
            "join_count": 2,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1313,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "How many students in the Student_Club are from the College of Engineering?",
        "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 74,
            "word_length": 12,
            "entities": [
                {
                    "text": "the College of Engineering",
                    "label": "ORG",
                    "start": 47,
                    "end": 73
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 145,
            "tables_count": 2,
            "tables": [
                "member",
                "major"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1377,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "How many student have the position of president?",
        "sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
        "evidence": "'President' is a position of Student Club",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 48,
            "word_length": 8,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 64,
            "tables_count": 1,
            "tables": [
                "member"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1318,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "What is the event that has the highest attendance of the students from the Student_Club?",
        "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
        "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 88,
            "word_length": 15,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "highest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 168,
            "tables_count": 2,
            "tables": [
                "attendance",
                "event"
            ],
            "join_count": 1,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1518,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
        "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
        "evidence": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 66,
            "word_length": 11,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 164,
            "tables_count": 2,
            "tables": [
                "transactions_1k",
                "gasstations"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1525,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
        "sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
        "evidence": "'2012/8/25' can be represented by '2012-08-25'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 66,
            "word_length": 12,
            "entities": [
                {
                    "text": "EUR",
                    "label": "ORG",
                    "start": 49,
                    "end": 52
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 202,
            "tables_count": 2,
            "tables": [
                "customers",
                "transactions_1k"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1470,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "How many gas stations in CZE has Premium gas?",
        "sql": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 45,
            "word_length": 9,
            "entities": [
                {
                    "text": "CZE",
                    "label": "ORG",
                    "start": 25,
                    "end": 28
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 89,
            "tables_count": 1,
            "tables": [
                "gasstations"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1495,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Which client ID consumed the most in September 2013?",
        "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "evidence": "September 2013 refers to yearmonth.date = '201309'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 52,
            "word_length": 9,
            "entities": [
                {
                    "text": "September 2013",
                    "label": "DATE",
                    "start": 37,
                    "end": 51
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2013"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 191,
            "tables_count": 2,
            "tables": [
                "customers",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1489,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "How much did the KAM customers consume in total in May 2013?",
        "sql": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'",
        "evidence": "May 2013 refers to yearmonth.date = 201305",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 60,
            "word_length": 12,
            "entities": [
                {
                    "text": "KAM",
                    "label": "ORG",
                    "start": 17,
                    "end": 20
                },
                {
                    "text": "May 2013",
                    "label": "DATE",
                    "start": 51,
                    "end": 59
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2013"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 155,
            "tables_count": 2,
            "tables": [
                "customers",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1523,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Which country was the card owner of No.667467 in?",
        "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 49,
            "word_length": 9,
            "entities": [
                {
                    "text": "No.667467",
                    "label": "ORG",
                    "start": 36,
                    "end": 45
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 137,
            "tables_count": 2,
            "tables": [
                "transactions_1k",
                "gasstations"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1494,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "What percentage of Slovakian gas stations are premium?",
        "sql": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
        "evidence": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 54,
            "word_length": 8,
            "entities": [
                {
                    "text": "Slovakian",
                    "label": "NORP",
                    "start": 19,
                    "end": 28
                }
            ],
            "entity_types": [
                "NORP"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 124,
            "tables_count": 1,
            "tables": [
                "gasstations"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1491,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 132,
            "word_length": 23,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "more"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 208,
            "tables_count": 1,
            "tables": [
                "gasstations"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 2
        }
    },
    {
        "id": 1513,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Which country's gas station had the first paid cusomer in 2012/8/25?",
        "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1",
        "evidence": "'2012/8/25' can be represented by '2012-08-25'",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 68,
            "word_length": 12,
            "entities": [
                {
                    "text": "first",
                    "label": "ORDINAL",
                    "start": 36,
                    "end": 41
                }
            ],
            "entity_types": [
                "ORDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "first"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 169,
            "tables_count": 2,
            "tables": [
                "transactions_1k",
                "gasstations"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1527,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Which gas station has the highest amount of revenue?",
        "sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
        "evidence": "",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 52,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "highest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 95,
            "tables_count": 1,
            "tables": [
                "transactions_1k"
            ],
            "join_count": 0,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1519,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
        "sql": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database",
        "difficulty": "simple",
        "question_analysis": {
            "char_length": 74,
            "word_length": 13,
            "entities": [
                {
                    "text": "2012/8/23 21:20:00",
                    "label": "TIME",
                    "start": 55,
                    "end": 73
                }
            ],
            "entity_types": [
                "TIME"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 166,
            "tables_count": 2,
            "tables": [
                "transactions_1k",
                "gasstations"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 48,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
        "sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
        "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 122,
            "word_length": 19,
            "entities": [
                {
                    "text": "Unified School District",
                    "label": "ORG",
                    "start": 28,
                    "end": 51
                },
                {
                    "text": "Orange County",
                    "label": "GPE",
                    "start": 63,
                    "end": 76
                },
                {
                    "text": "Elementary School District",
                    "label": "PERSON",
                    "start": 87,
                    "end": 113
                }
            ],
            "entity_types": [
                "GPE",
                "ORG",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 169,
            "tables_count": 1,
            "tables": [
                "schools"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
        "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 96,
            "word_length": 16,
            "entities": [
                {
                    "text": "three",
                    "label": "CARDINAL",
                    "start": 23,
                    "end": 28
                },
                {
                    "text": "5-17",
                    "label": "DATE",
                    "start": 67,
                    "end": 71
                }
            ],
            "entity_types": [
                "DATE",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "three",
                "5",
                "17"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "lowest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 280,
            "tables_count": 1,
            "tables": [
                "frpm"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 3,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 81,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
        "sql": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1",
        "evidence": "State of California refers to state = 'CA'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 157,
            "word_length": 28,
            "entities": [
                {
                    "text": "California",
                    "label": "GPE",
                    "start": 54,
                    "end": 64
                }
            ],
            "entity_types": [
                "GPE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "lowest",
                "lowest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 4,
            "column_overlap_lemma_count": 5
        },
        "sql_analysis": {
            "char_length": 171,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 3
        }
    },
    {
        "id": 23,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
        "sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
        "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 154,
            "word_length": 28,
            "entities": [
                {
                    "text": "more than 30",
                    "label": "CARDINAL",
                    "start": 31,
                    "end": 43
                },
                {
                    "text": "K-12",
                    "label": "PRODUCT",
                    "start": 79,
                    "end": 83
                }
            ],
            "entity_types": [
                "PRODUCT",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "30",
                "5",
                "17"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "more"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 159,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 26,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "sql": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
        "evidence": "Full communication address should include Street, City, State and zip code if any.",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 142,
            "word_length": 26,
            "entities": [
                {
                    "text": "Monterey",
                    "label": "GPE",
                    "start": 66,
                    "end": 74
                },
                {
                    "text": "more than 800",
                    "label": "CARDINAL",
                    "start": 85,
                    "end": 98
                },
                {
                    "text": "ages 15-17",
                    "label": "DATE",
                    "start": 131,
                    "end": 141
                }
            ],
            "entity_types": [
                "GPE",
                "DATE",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "800",
                "15",
                "17"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "more"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 4
        },
        "sql_analysis": {
            "char_length": 248,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 5
        }
    },
    {
        "id": 135,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
        "sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "evidence": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 103,
            "word_length": 17,
            "entities": [
                {
                    "text": "monthly",
                    "label": "DATE",
                    "start": 63,
                    "end": 70
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 195,
            "tables_count": 2,
            "tables": [
                "trans",
                "account"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 89,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 91,
            "word_length": 14,
            "entities": [
                {
                    "text": "East Bohemia",
                    "label": "LOC",
                    "start": 71,
                    "end": 83
                }
            ],
            "entity_types": [
                "LOC"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 176,
            "tables_count": 2,
            "tables": [
                "district",
                "account"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 137,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "How many accounts have running contracts in Branch location 1?",
        "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 62,
            "word_length": 10,
            "entities": [
                {
                    "text": "Branch",
                    "label": "GPE",
                    "start": 44,
                    "end": 50
                },
                {
                    "text": "1",
                    "label": "CARDINAL",
                    "start": 60,
                    "end": 61
                }
            ],
            "entity_types": [
                "GPE",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "1"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 228,
            "tables_count": 3,
            "tables": [
                "district",
                "loan",
                "account"
            ],
            "join_count": 2,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 188,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
        "sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
        "evidence": "",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 164,
            "word_length": 28,
            "entities": [
                {
                    "text": "more than 24 months",
                    "label": "DATE",
                    "start": 42,
                    "end": 61
                },
                {
                    "text": "1997",
                    "label": "DATE",
                    "start": 159,
                    "end": 163
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "24",
                "1997"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "more"
            ],
            "has_comparatives": true,
            "superlatives": [
                "lowest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 185,
            "tables_count": 2,
            "tables": [
                "loan",
                "account"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 185,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "What proportion of customers who have accounts at the Prague branch are female?",
        "sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
        "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 79,
            "word_length": 13,
            "entities": [
                {
                    "text": "Prague",
                    "label": "GPE",
                    "start": 54,
                    "end": 60
                }
            ],
            "entity_types": [
                "GPE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 171,
            "tables_count": 2,
            "tables": [
                "district",
                "client"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 226,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
        "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "evidence": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 130,
            "word_length": 22,
            "entities": [
                {
                    "text": "TR008",
                    "label": "PRODUCT",
                    "start": 55,
                    "end": 60
                },
                {
                    "text": "five",
                    "label": "CARDINAL",
                    "start": 110,
                    "end": 114
                }
            ],
            "entity_types": [
                "PRODUCT",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "five"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 163,
            "tables_count": 1,
            "tables": [
                "bond"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 250,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "Of all the carcinogenic molecules, which one has the most double bonds?",
        "sql": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T",
        "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 71,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [
                "one"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 264,
            "tables_count": 3,
            "tables": [
                "(",
                "bond",
                "molecule"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 1,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 243,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
        "sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
        "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 76,
            "word_length": 13,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 243,
            "tables_count": 2,
            "tables": [
                "atom",
                "connected"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 208,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "Which type of label is the most numerous in atoms with hydrogen?",
        "sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
        "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 64,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 226,
            "tables_count": 3,
            "tables": [
                "(",
                "atom",
                "molecule"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 245,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "What is the average number of bonds the atoms with the element iodine have?",
        "sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 75,
            "word_length": 14,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 151,
            "tables_count": 2,
            "tables": [
                "atom",
                "connected"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 232,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
        "sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 120,
            "word_length": 19,
            "entities": [
                {
                    "text": "three",
                    "label": "CARDINAL",
                    "start": 16,
                    "end": 21
                },
                {
                    "text": "two",
                    "label": "CARDINAL",
                    "start": 63,
                    "end": 66
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "three",
                "two"
            ],
            "has_numbers": true,
            "has_negation": true,
            "negation_words": [
                "not"
            ],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 3,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 183,
            "tables_count": 2,
            "tables": [
                "bond",
                "molecule"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 462,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
        "sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
        "evidence": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 75,
            "word_length": 16,
            "entities": [
                {
                    "text": "Italian",
                    "label": "NORP",
                    "start": 11,
                    "end": 18
                }
            ],
            "entity_types": [
                "NORP"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 146,
            "tables_count": 2,
            "tables": [
                "cards",
                "set_translations"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 469,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 81,
            "word_length": 15,
            "entities": [
                {
                    "text": "Angel of Mercy",
                    "label": "WORK_OF_ART",
                    "start": 27,
                    "end": 41
                },
                {
                    "text": "Magic",
                    "label": "ORG",
                    "start": 53,
                    "end": 58
                }
            ],
            "entity_types": [
                "ORG",
                "WORK_OF_ART"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 144,
            "tables_count": 2,
            "tables": [
                "sets",
                "cards"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 473,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
        "sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
        "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 83,
            "word_length": 14,
            "entities": [
                {
                    "text": "Adarkar Valkyrie",
                    "label": "PERSON",
                    "start": 25,
                    "end": 41
                },
                {
                    "text": "the United States",
                    "label": "GPE",
                    "start": 65,
                    "end": 82
                }
            ],
            "entity_types": [
                "GPE",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 140,
            "tables_count": 2,
            "tables": [
                "sets",
                "cards"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 498,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 73,
            "word_length": 16,
            "entities": [
                {
                    "text": "French",
                    "label": "NORP",
                    "start": 11,
                    "end": 17
                },
                {
                    "text": "Tendo Ice Bridge",
                    "label": "WORK_OF_ART",
                    "start": 49,
                    "end": 65
                }
            ],
            "entity_types": [
                "WORK_OF_ART",
                "NORP"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 192,
            "tables_count": 2,
            "tables": [
                "cards",
                "set_translations"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 432,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "Which Russian set of cards contains the most cards overall?",
        "sql": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
        "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 59,
            "word_length": 10,
            "entities": [
                {
                    "text": "Russian",
                    "label": "NORP",
                    "start": 6,
                    "end": 13
                }
            ],
            "entity_types": [
                "NORP"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 177,
            "tables_count": 2,
            "tables": [
                "sets",
                "set_translations"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 522,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
        "sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
        "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 92,
            "word_length": 18,
            "entities": [
                {
                    "text": "1st",
                    "label": "ORDINAL",
                    "start": 23,
                    "end": 26
                }
            ],
            "entity_types": [
                "ORDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "1st"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 168,
            "tables_count": 2,
            "tables": [
                "cards",
                "legalities"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 1,
            "clause_types": [
                "GROUP BY"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 640,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
        "sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
        "evidence": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 111,
            "word_length": 19,
            "entities": [
                {
                    "text": "Mornington",
                    "label": "ORG",
                    "start": 59,
                    "end": 69
                },
                {
                    "text": "Amos",
                    "label": "PERSON",
                    "start": 106,
                    "end": 110
                }
            ],
            "entity_types": [
                "ORG",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 235,
            "tables_count": 3,
            "tables": [
                "posts",
                "users",
                "postHistory"
            ],
            "join_count": 2,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 587,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
        "sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
        "evidence": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 112,
            "word_length": 21,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 162,
            "tables_count": 2,
            "tables": [
                "posts",
                "comments"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 1,
            "clause_types": [
                "GROUP BY"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 3
        }
    },
    {
        "id": 657,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
        "sql": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )",
        "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 116,
            "word_length": 22,
            "entities": [
                {
                    "text": "8",
                    "label": "CARDINAL",
                    "start": 23,
                    "end": 24
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "8"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "highest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 137,
            "tables_count": 2,
            "tables": [
                "users",
                "votes"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 557,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
        "sql": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
        "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 100,
            "word_length": 21,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [
                "5"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "elder"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 154,
            "tables_count": 2,
            "tables": [
                "posts",
                "users"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 692,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "sql": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 143,
            "word_length": 29,
            "entities": [
                {
                    "text": "Zolomon",
                    "label": "PERSON",
                    "start": 65,
                    "end": 72
                }
            ],
            "entity_types": [
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 127,
            "tables_count": 2,
            "tables": [
                "badges",
                "users"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 740,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "How many female superheroes have a strength value of 100?",
        "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 57,
            "word_length": 10,
            "entities": [
                {
                    "text": "100",
                    "label": "CARDINAL",
                    "start": 53,
                    "end": 56
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "100"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 287,
            "tables_count": 4,
            "tables": [
                "superhero",
                "attribute",
                "gender",
                "hero_attribute"
            ],
            "join_count": 3,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 827,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "What is the average height of a non-human superhero in Dark Horse Comics?",
        "sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'",
        "evidence": "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 73,
            "word_length": 14,
            "entities": [
                {
                    "text": "Dark Horse Comics",
                    "label": "ORG",
                    "start": 55,
                    "end": 72
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 212,
            "tables_count": 3,
            "tables": [
                "superhero",
                "publisher",
                "race"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 782,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "List the heroes' names whose eyes and hair colours are both black.",
        "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
        "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 66,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 153,
            "tables_count": 2,
            "tables": [
                "superhero",
                "colour"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 798,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
        "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 57,
            "word_length": 10,
            "entities": [
                {
                    "text": "Hawkman",
                    "label": "ORG",
                    "start": 26,
                    "end": 33
                },
                {
                    "text": "Karate Kid",
                    "label": "PERSON",
                    "start": 35,
                    "end": 45
                },
                {
                    "text": "Speedy",
                    "label": "PERSON",
                    "start": 50,
                    "end": 56
                }
            ],
            "entity_types": [
                "ORG",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 162,
            "tables_count": 2,
            "tables": [
                "superhero",
                "publisher"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 845,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
        "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80",
        "evidence": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 100,
            "word_length": 17,
            "entities": [
                {
                    "text": "greater than",
                    "label": "PERCENT",
                    "start": 42,
                    "end": 54
                },
                {
                    "text": "80%",
                    "label": "PERCENT",
                    "start": 55,
                    "end": 58
                }
            ],
            "entity_types": [
                "PERCENT"
            ],
            "has_entities": true,
            "numbers": [
                "80"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "greater"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 215,
            "tables_count": 3,
            "tables": [
                "superhero",
                "superpower",
                "hero_power"
            ],
            "join_count": 2,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 801,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "Find the ratio between male superheroes and female superheroes.",
        "sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
        "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 63,
            "word_length": 9,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 215,
            "tables_count": 2,
            "tables": [
                "superhero",
                "gender"
            ],
            "join_count": 1,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 989,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
        "sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
        "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 81,
            "word_length": 15,
            "entities": [
                {
                    "text": "the Canadian Grand Prix",
                    "label": "ORG",
                    "start": 23,
                    "end": 46
                },
                {
                    "text": "2008",
                    "label": "DATE",
                    "start": 50,
                    "end": 54
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2008"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 168,
            "tables_count": 2,
            "tables": [
                "races",
                "results"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 877,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
        "sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 79,
            "word_length": 16,
            "entities": [
                {
                    "text": "872",
                    "label": "CARDINAL",
                    "start": 54,
                    "end": 57
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "872"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "youngest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 178,
            "tables_count": 2,
            "tables": [
                "drivers",
                "results"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 995,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "evidence": "Average score = AVG(points)",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 77,
            "word_length": 14,
            "entities": [
                {
                    "text": "Lewis Hamilton",
                    "label": "PERSON",
                    "start": 29,
                    "end": 43
                },
                {
                    "text": "the Turkish Grand Prix",
                    "label": "EVENT",
                    "start": 54,
                    "end": 76
                }
            ],
            "entity_types": [
                "EVENT",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 241,
            "tables_count": 3,
            "tables": [
                "driverStandings",
                "drivers",
                "races"
            ],
            "join_count": 2,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 981,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
        "sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 115,
            "word_length": 22,
            "entities": [
                {
                    "text": "what year",
                    "label": "DATE",
                    "start": 3,
                    "end": 12
                },
                {
                    "text": "first",
                    "label": "ORDINAL",
                    "start": 45,
                    "end": 50
                }
            ],
            "entity_types": [
                "ORDINAL",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "first"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "youngest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 273,
            "tables_count": 3,
            "tables": [
                "races",
                "qualifying",
                "drivers"
            ],
            "join_count": 2,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 4
        }
    },
    {
        "id": 973,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
        "sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 87,
            "word_length": 17,
            "entities": [
                {
                    "text": "10",
                    "label": "CARDINAL",
                    "start": 13,
                    "end": 15
                },
                {
                    "text": "Spanish",
                    "label": "NORP",
                    "start": 16,
                    "end": 23
                },
                {
                    "text": "1982",
                    "label": "DATE",
                    "start": 53,
                    "end": 57
                }
            ],
            "entity_types": [
                "DATE",
                "NORP",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "10",
                "1982"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "latest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 192,
            "tables_count": 2,
            "tables": [
                "drivers",
                "pitStops"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1112,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "sql": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 73,
            "word_length": 12,
            "entities": [
                {
                    "text": "2010/2/22",
                    "label": "CARDINAL",
                    "start": 63,
                    "end": 72
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 203,
            "tables_count": 2,
            "tables": [
                "Team_Attributes",
                "Team"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1103,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
        "sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
        "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 55,
            "word_length": 10,
            "entities": [
                {
                    "text": "Aaron Mooy",
                    "label": "PERSON",
                    "start": 32,
                    "end": 42
                },
                {
                    "text": "2016/2/4",
                    "label": "DATE",
                    "start": 46,
                    "end": 54
                }
            ],
            "entity_types": [
                "DATE",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 196,
            "tables_count": 2,
            "tables": [
                "Player",
                "Player_Attributes"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1130,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What are the short name of team who played safe while creating chance of passing?",
        "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
        "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 81,
            "word_length": 15,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 163,
            "tables_count": 2,
            "tables": [
                "Team_Attributes",
                "Team"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1111,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "sql": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 70,
            "word_length": 11,
            "entities": [
                {
                    "text": "2013/9/20",
                    "label": "CARDINAL",
                    "start": 60,
                    "end": 69
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 203,
            "tables_count": 2,
            "tables": [
                "Team_Attributes",
                "Team"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1101,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What is the average number of goals made by Parma as the away team while playing in Italy?",
        "sql": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
        "evidence": "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 90,
            "word_length": 18,
            "entities": [
                {
                    "text": "Parma",
                    "label": "PERSON",
                    "start": 44,
                    "end": 49
                },
                {
                    "text": "Italy",
                    "label": "GPE",
                    "start": 84,
                    "end": 89
                }
            ],
            "entity_types": [
                "GPE",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 245,
            "tables_count": 3,
            "tables": [
                "Match",
                "TEAM",
                "Country"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1030,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
        "sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "evidence": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 80,
            "word_length": 17,
            "entities": [
                {
                    "text": "the 2016 season",
                    "label": "DATE",
                    "start": 64,
                    "end": 79
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2016"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 203,
            "tables_count": 2,
            "tables": [
                "Match",
                "League"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1274,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?",
        "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL",
        "evidence": "anti-SSB are normal refers to SSB IN ('negative', '0'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 111,
            "word_length": 19,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 3,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 157,
            "tables_count": 2,
            "tables": [
                "Examination",
                "Laboratory"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1211,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
        "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800",
        "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 112,
            "word_length": 19,
            "entities": [
                {
                    "text": "ID",
                    "label": "ORG",
                    "start": 12,
                    "end": 14
                },
                {
                    "text": "100-300",
                    "label": "CARDINAL",
                    "start": 75,
                    "end": 82
                }
            ],
            "entity_types": [
                "ORG",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "100",
                "300"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 186,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1227,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "What is the average age of the male patient with high cholesterol?",
        "sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
        "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 66,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 174,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1238,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
        "sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
        "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 119,
            "word_length": 21,
            "entities": [
                {
                    "text": "SLE",
                    "label": "ORG",
                    "start": 43,
                    "end": 46
                },
                {
                    "text": "ID",
                    "label": "ORG",
                    "start": 108,
                    "end": 110
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "oldest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 176,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1240,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.",
        "sql": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'",
        "evidence": "laboratory examinations in 1991 refers to Date like '1991%'; average hematoclit level = AVG(HCT); hematoclit level that is lower than the normal range refers to HCT < 29;",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 111,
            "word_length": 18,
            "entities": [
                {
                    "text": "1991",
                    "label": "DATE",
                    "start": 32,
                    "end": 36
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1991"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [
                "lower"
            ],
            "has_comparatives": true,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 137,
            "tables_count": 2,
            "tables": [
                "Laboratory",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1156,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "State the ID and age of patient with positive degree of coagulation.",
        "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
        "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 68,
            "word_length": 12,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 171,
            "tables_count": 2,
            "tables": [
                "Examination",
                "Patient"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1340,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
        "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 107,
            "word_length": 19,
            "entities": [
                {
                    "text": "year 2019 and",
                    "label": "DATE",
                    "start": 88,
                    "end": 101
                },
                {
                    "text": "2020",
                    "label": "DATE",
                    "start": 102,
                    "end": 106
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2019",
                "2020"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 244,
            "tables_count": 2,
            "tables": [
                "event",
                "budget"
            ],
            "join_count": 1,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1321,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
        "sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "evidence": "events attended in 2019 refers to YEAR(event_date) = 2019",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 70,
            "word_length": 12,
            "entities": [
                {
                    "text": "Sacha Harrison",
                    "label": "PERSON",
                    "start": 40,
                    "end": 54
                },
                {
                    "text": "2019",
                    "label": "DATE",
                    "start": 65,
                    "end": 69
                }
            ],
            "entity_types": [
                "DATE",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [
                "2019"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 265,
            "tables_count": 3,
            "tables": [
                "attendance",
                "event",
                "member"
            ],
            "join_count": 2,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1456,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
        "sql": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
        "evidence": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 104,
            "word_length": 20,
            "entities": [
                {
                    "text": "five",
                    "label": "CARDINAL",
                    "start": 30,
                    "end": 34
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "five"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 204,
            "tables_count": 3,
            "tables": [
                "member",
                "expense",
                "budget"
            ],
            "join_count": 2,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1430,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "What is the last name and position of the student that bought pizza on 09/10/2019?",
        "sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
        "evidence": "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 82,
            "word_length": 15,
            "entities": [
                {
                    "text": "09/10/2019",
                    "label": "DATE",
                    "start": 71,
                    "end": 81
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 185,
            "tables_count": 2,
            "tables": [
                "member",
                "expense"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 1403,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
        "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
        "evidence": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 82,
            "word_length": 15,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 179,
            "tables_count": 2,
            "tables": [
                "event",
                "budget"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 1479,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Which year recorded the most consumption of gas paid in CZK?",
        "sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year.",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 60,
            "word_length": 11,
            "entities": [
                {
                    "text": "CZK",
                    "label": "ORG",
                    "start": 56,
                    "end": 59
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 208,
            "tables_count": 2,
            "tables": [
                "customers",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1474,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
        "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "evidence": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 62,
            "word_length": 11,
            "entities": [
                {
                    "text": "CZK",
                    "label": "ORG",
                    "start": 27,
                    "end": 30
                },
                {
                    "text": "2011",
                    "label": "DATE",
                    "start": 57,
                    "end": 61
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2011"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 230,
            "tables_count": 2,
            "tables": [
                "customers",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1531,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
        "sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "evidence": "average price per single item = Total(price) / Total(amount)",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 140,
            "word_length": 25,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 276,
            "tables_count": 3,
            "tables": [
                "customers",
                "transactions_1k",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 1,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 3
        }
    },
    {
        "id": 1516,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "How many transactions were paid in CZK in the morning of 2012/8/26?",
        "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
        "evidence": "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 67,
            "word_length": 12,
            "entities": [
                {
                    "text": "CZK",
                    "label": "ORG",
                    "start": 35,
                    "end": 38
                },
                {
                    "text": "the morning",
                    "label": "TIME",
                    "start": 42,
                    "end": 53
                },
                {
                    "text": "2012/8/26",
                    "label": "CARDINAL",
                    "start": 57,
                    "end": 66
                }
            ],
            "entity_types": [
                "TIME",
                "ORG",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 195,
            "tables_count": 2,
            "tables": [
                "customers",
                "transactions_1k"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1472,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "In 2012, who had the least consumption in LAM?",
        "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "difficulty": "moderate",
        "question_analysis": {
            "char_length": 46,
            "word_length": 9,
            "entities": [
                {
                    "text": "2012",
                    "label": "DATE",
                    "start": 3,
                    "end": 7
                },
                {
                    "text": "LAM",
                    "label": "ORG",
                    "start": 42,
                    "end": 45
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2012"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "least"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 225,
            "tables_count": 2,
            "tables": [
                "customers",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 28,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 194,
            "word_length": 32,
            "entities": [
                {
                    "text": "K-12",
                    "label": "PRODUCT",
                    "start": 40,
                    "end": 44
                },
                {
                    "text": "15-17",
                    "label": "CARDINAL",
                    "start": 60,
                    "end": 65
                },
                {
                    "text": "DOC",
                    "label": "ORG",
                    "start": 132,
                    "end": 135
                }
            ],
            "entity_types": [
                "ORG",
                "PRODUCT",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "15",
                "17"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 368,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 2
        }
    },
    {
        "id": 83,
        "dataset": "bird",
        "database": {
            "name": "california_schools",
            "path": [
                "stratified_output/databases/california_schools/california_schools.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/california_schools/schools.csv",
                "stratified_output/databases/california_schools/satscores.csv",
                "stratified_output/databases/california_schools/frpm.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "california_schools",
            "path": [
                "stratified_output/schemas/california_schools/california_schools.csv"
            ],
            "type": "csv"
        },
        "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
        "sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
        "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 286,
            "word_length": 50,
            "entities": [
                {
                    "text": "Kindergarten",
                    "label": "PERSON",
                    "start": 68,
                    "end": 80
                },
                {
                    "text": "8th",
                    "label": "ORDINAL",
                    "start": 84,
                    "end": 87
                },
                {
                    "text": "Kindergarten",
                    "label": "PERSON",
                    "start": 177,
                    "end": 189
                },
                {
                    "text": "8th",
                    "label": "ORDINAL",
                    "start": 193,
                    "end": 196
                }
            ],
            "entity_types": [
                "ORDINAL",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [
                "8th",
                "8th"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 3
        },
        "sql_analysis": {
            "char_length": 223,
            "tables_count": 2,
            "tables": [
                "schools",
                "frpm"
            ],
            "join_count": 1,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 1,
            "clause_types": [
                "GROUP BY"
            ],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "COUNT"
            ],
            "select_columns": 2
        }
    },
    {
        "id": 115,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 129,
            "word_length": 22,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "biggest"
            ],
            "has_superlatives": true,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 221,
            "tables_count": 2,
            "tables": [
                "district",
                "client"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 3,
            "clause_types": [
                "GROUP BY",
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 125,
        "dataset": "bird",
        "database": {
            "name": "financial",
            "path": [
                "stratified_output/databases/financial/financial.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/financial/loan.csv",
                "stratified_output/databases/financial/client.csv",
                "stratified_output/databases/financial/district.csv",
                "stratified_output/databases/financial/trans.csv",
                "stratified_output/databases/financial/account.csv",
                "stratified_output/databases/financial/card.csv",
                "stratified_output/databases/financial/order.csv",
                "stratified_output/databases/financial/disp.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "financial",
            "path": [
                "stratified_output/schemas/financial/financial.csv"
            ],
            "type": "csv"
        },
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 175,
            "word_length": 30,
            "entities": [
                {
                    "text": "from year 1995 to 1996",
                    "label": "DATE",
                    "start": 152,
                    "end": 174
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "1995",
                "1996"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 3,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 210,
            "tables_count": 3,
            "tables": [
                "district",
                "loan",
                "account"
            ],
            "join_count": 2,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 322,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "What is the element of toxicology for the atom with the ID of TR000_1?",
        "sql": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
        "evidence": "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 70,
            "word_length": 14,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 59,
            "tables_count": 1,
            "tables": [
                "atom"
            ],
            "join_count": 0,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 337,
        "dataset": "bird",
        "database": {
            "name": "toxicology",
            "path": [
                "stratified_output/databases/toxicology/toxicology.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/toxicology/bond.csv",
                "stratified_output/databases/toxicology/molecule.csv",
                "stratified_output/databases/toxicology/atom.csv",
                "stratified_output/databases/toxicology/connected.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "toxicology",
            "path": [
                "stratified_output/schemas/toxicology/toxicology.csv"
            ],
            "type": "csv"
        },
        "question": "List the element and bond type included in the molecule with molecule ID of TR002.",
        "sql": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
        "evidence": "TR002 is the molecule id",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 82,
            "word_length": 15,
            "entities": [
                {
                    "text": "TR002",
                    "label": "ORG",
                    "start": 76,
                    "end": 81
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 2,
            "table_overlap_lemma_count": 2,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 144,
            "tables_count": 2,
            "tables": [
                "bond",
                "atom"
            ],
            "join_count": 1,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 416,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What percentage of cards without power are in French?",
        "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
        "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 53,
            "word_length": 9,
            "entities": [
                {
                    "text": "French",
                    "label": "LANGUAGE",
                    "start": 46,
                    "end": 52
                }
            ],
            "entity_types": [
                "LANGUAGE"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 206,
            "tables_count": 2,
            "tables": [
                "cards",
                "foreign_data"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 415,
        "dataset": "bird",
        "database": {
            "name": "card_games",
            "path": [
                "stratified_output/databases/card_games/card_games.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/card_games/legalities.csv",
                "stratified_output/databases/card_games/cards.csv",
                "stratified_output/databases/card_games/rulings.csv",
                "stratified_output/databases/card_games/set_translations.csv",
                "stratified_output/databases/card_games/sets.csv",
                "stratified_output/databases/card_games/foreign_data.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "card_games",
            "path": [
                "stratified_output/schemas/card_games/card_games.csv"
            ],
            "type": "csv"
        },
        "question": "What percentage of cards with format commander and legal status do not have a content warning?",
        "sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 94,
            "word_length": 16,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": true,
            "negation_words": [
                "not"
            ],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 2
        },
        "sql_analysis": {
            "char_length": 219,
            "tables_count": 2,
            "tables": [
                "cards",
                "legalities"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 586,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "evidence": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 77,
            "word_length": 14,
            "entities": [
                {
                    "text": "50",
                    "label": "CARDINAL",
                    "start": 36,
                    "end": 38
                }
            ],
            "entity_types": [
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "50"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 194,
            "tables_count": 3,
            "tables": [
                "posts",
                "users",
                "votes"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 2
        }
    },
    {
        "id": 639,
        "dataset": "bird",
        "database": {
            "name": "codebase_community",
            "path": [
                "stratified_output/databases/codebase_community/codebase_community.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/codebase_community/postLinks.csv",
                "stratified_output/databases/codebase_community/postHistory.csv",
                "stratified_output/databases/codebase_community/badges.csv",
                "stratified_output/databases/codebase_community/posts.csv",
                "stratified_output/databases/codebase_community/users.csv",
                "stratified_output/databases/codebase_community/tags.csv",
                "stratified_output/databases/codebase_community/votes.csv",
                "stratified_output/databases/codebase_community/comments.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "codebase_community",
            "path": [
                "stratified_output/schemas/codebase_community/codebase_community.csv"
            ],
            "type": "csv"
        },
        "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 94,
            "word_length": 16,
            "entities": [
                {
                    "text": "Community",
                    "label": "ORG",
                    "start": 25,
                    "end": 34
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 230,
            "tables_count": 3,
            "tables": [
                "users",
                "postHistory",
                "tags"
            ],
            "join_count": 2,
            "where_conditions": 1,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 769,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 71,
            "word_length": 11,
            "entities": [
                {
                    "text": "Dark Horse Comics",
                    "label": "ORG",
                    "start": 53,
                    "end": 70
                }
            ],
            "entity_types": [
                "ORG"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "most"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 331,
            "tables_count": 4,
            "tables": [
                "superhero",
                "attribute",
                "publisher",
                "hero_attribute"
            ],
            "join_count": 3,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 2,
            "clause_types": [
                "ORDER BY",
                "LIMIT"
            ],
            "aggregation_function_count": 0,
            "aggregation_functions": [],
            "select_columns": 1
        }
    },
    {
        "id": 819,
        "dataset": "bird",
        "database": {
            "name": "superhero",
            "path": [
                "stratified_output/databases/superhero/superhero.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/superhero/gender.csv",
                "stratified_output/databases/superhero/superpower.csv",
                "stratified_output/databases/superhero/publisher.csv",
                "stratified_output/databases/superhero/superhero.csv",
                "stratified_output/databases/superhero/colour.csv",
                "stratified_output/databases/superhero/attribute.csv",
                "stratified_output/databases/superhero/hero_power.csv",
                "stratified_output/databases/superhero/race.csv",
                "stratified_output/databases/superhero/alignment.csv",
                "stratified_output/databases/superhero/hero_attribute.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "superhero",
            "path": [
                "stratified_output/schemas/superhero/superhero.csv"
            ],
            "type": "csv"
        },
        "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
        "sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
        "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 132,
            "word_length": 21,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 214,
            "tables_count": 2,
            "tables": [
                "superhero",
                "colour"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 954,
        "dataset": "bird",
        "database": {
            "name": "formula_1",
            "path": [
                "stratified_output/databases/formula_1/formula_1.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/formula_1/circuits.csv",
                "stratified_output/databases/formula_1/status.csv",
                "stratified_output/databases/formula_1/drivers.csv",
                "stratified_output/databases/formula_1/driverStandings.csv",
                "stratified_output/databases/formula_1/races.csv",
                "stratified_output/databases/formula_1/constructors.csv",
                "stratified_output/databases/formula_1/constructorResults.csv",
                "stratified_output/databases/formula_1/lapTimes.csv",
                "stratified_output/databases/formula_1/qualifying.csv",
                "stratified_output/databases/formula_1/pitStops.csv",
                "stratified_output/databases/formula_1/seasons.csv",
                "stratified_output/databases/formula_1/constructorStandings.csv",
                "stratified_output/databases/formula_1/results.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "formula_1",
            "path": [
                "stratified_output/schemas/formula_1/formula_1.csv"
            ],
            "type": "csv"
        },
        "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
        "sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
        "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 86,
            "word_length": 13,
            "entities": [
                {
                    "text": "Japanese",
                    "label": "NORP",
                    "start": 51,
                    "end": 59
                },
                {
                    "text": "2007",
                    "label": "DATE",
                    "start": 73,
                    "end": 77
                },
                {
                    "text": "2009",
                    "label": "DATE",
                    "start": 81,
                    "end": 85
                }
            ],
            "entity_types": [
                "DATE",
                "NORP"
            ],
            "has_entities": true,
            "numbers": [
                "2007",
                "2009"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 270,
            "tables_count": 3,
            "tables": [
                "races",
                "drivers",
                "results"
            ],
            "join_count": 2,
            "where_conditions": 3,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1036,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "List the long name of teams with above-average build-up play passing in 2012.",
        "sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
        "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 77,
            "word_length": 15,
            "entities": [
                {
                    "text": "2012",
                    "label": "DATE",
                    "start": 72,
                    "end": 76
                }
            ],
            "entity_types": [
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2012"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 374,
            "tables_count": 2,
            "tables": [
                "Team_Attributes",
                "Team"
            ],
            "join_count": 2,
            "where_conditions": 2,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1076,
        "dataset": "bird",
        "database": {
            "name": "european_football_2",
            "path": [
                "stratified_output/databases/european_football_2/european_football_2.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/european_football_2/Team_Attributes.csv",
                "stratified_output/databases/european_football_2/Player.csv",
                "stratified_output/databases/european_football_2/Match.csv",
                "stratified_output/databases/european_football_2/League.csv",
                "stratified_output/databases/european_football_2/Country.csv",
                "stratified_output/databases/european_football_2/Player_Attributes.csv",
                "stratified_output/databases/european_football_2/Team.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "european_football_2",
            "path": [
                "stratified_output/schemas/european_football_2/european_football_2.csv"
            ],
            "type": "csv"
        },
        "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
        "sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 102,
            "word_length": 16,
            "entities": [
                {
                    "text": "Abdou Diallo",
                    "label": "ORG",
                    "start": 65,
                    "end": 77
                },
                {
                    "text": "Aaron Appindangoye",
                    "label": "PERSON",
                    "start": 82,
                    "end": 100
                }
            ],
            "entity_types": [
                "ORG",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 450,
            "tables_count": 2,
            "tables": [
                "Player",
                "Player_Attributes"
            ],
            "join_count": 1,
            "where_conditions": 0,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 4,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1190,
        "dataset": "bird",
        "database": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/databases/thrombosis_prediction/thrombosis_prediction.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/thrombosis_prediction/Laboratory.csv",
                "stratified_output/databases/thrombosis_prediction/Patient.csv",
                "stratified_output/databases/thrombosis_prediction/Examination.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "thrombosis_prediction",
            "path": [
                "stratified_output/schemas/thrombosis_prediction/thrombosis_prediction.csv"
            ],
            "type": "csv"
        },
        "question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
        "sql": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30",
        "evidence": "proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30; uric acid level below the normal range refers to UA < = 6.5; calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)\uff0c100)",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 123,
            "word_length": 21,
            "entities": [],
            "entity_types": [],
            "has_entities": false,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 0,
            "column_overlap_lemma_count": 0
        },
        "sql_analysis": {
            "char_length": 132,
            "tables_count": 1,
            "tables": [
                "Laboratory"
            ],
            "join_count": 0,
            "where_conditions": 2,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 2,
            "aggregation_functions": [
                "COUNT",
                "SUM"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1339,
        "dataset": "bird",
        "database": {
            "name": "student_club",
            "path": [
                "stratified_output/databases/student_club/student_club.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/student_club/income.csv",
                "stratified_output/databases/student_club/budget.csv",
                "stratified_output/databases/student_club/zip_code.csv",
                "stratified_output/databases/student_club/expense.csv",
                "stratified_output/databases/student_club/member.csv",
                "stratified_output/databases/student_club/attendance.csv",
                "stratified_output/databases/student_club/event.csv",
                "stratified_output/databases/student_club/major.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "student_club",
            "path": [
                "stratified_output/schemas/student_club/student_club.csv"
            ],
            "type": "csv"
        },
        "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
        "sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 96,
            "word_length": 16,
            "entities": [
                {
                    "text": "Elijah Allen",
                    "label": "PERSON",
                    "start": 38,
                    "end": 50
                },
                {
                    "text": "September",
                    "label": "DATE",
                    "start": 74,
                    "end": 83
                },
                {
                    "text": "October",
                    "label": "DATE",
                    "start": 88,
                    "end": 95
                }
            ],
            "entity_types": [
                "DATE",
                "PERSON"
            ],
            "has_entities": true,
            "numbers": [],
            "has_numbers": false,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 1,
            "column_overlap_count": 2,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 239,
            "tables_count": 2,
            "tables": [
                "member",
                "expense"
            ],
            "join_count": 1,
            "where_conditions": 4,
            "subquery_count": 0,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 1,
            "aggregation_functions": [
                "AVG"
            ],
            "select_columns": 1
        }
    },
    {
        "id": 1481,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 182,
            "word_length": 34,
            "entities": [
                {
                    "text": "annual",
                    "label": "DATE",
                    "start": 30,
                    "end": 36
                },
                {
                    "text": "CZK",
                    "label": "ORG",
                    "start": 119,
                    "end": 122
                },
                {
                    "text": "2013",
                    "label": "DATE",
                    "start": 127,
                    "end": 131
                },
                {
                    "text": "SME",
                    "label": "ORG",
                    "start": 140,
                    "end": 143
                },
                {
                    "text": "LAM",
                    "label": "ORG",
                    "start": 148,
                    "end": 151
                },
                {
                    "text": "LAM",
                    "label": "ORG",
                    "start": 153,
                    "end": 156
                },
                {
                    "text": "KAM",
                    "label": "ORG",
                    "start": 161,
                    "end": 164
                },
                {
                    "text": "KAM",
                    "label": "ORG",
                    "start": 170,
                    "end": 173
                },
                {
                    "text": "SME",
                    "label": "ORG",
                    "start": 178,
                    "end": 181
                }
            ],
            "entity_types": [
                "ORG",
                "DATE"
            ],
            "has_entities": true,
            "numbers": [
                "2013"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [
                "least"
            ],
            "has_superlatives": true,
            "table_overlap_count": 1,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 735,
            "tables_count": 2,
            "tables": [
                "customers",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 4,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 13,
            "aggregation_functions": [
                "COUNT",
                "SUM",
                "MIN"
            ],
            "select_columns": 3
        }
    },
    {
        "id": 1526,
        "dataset": "bird",
        "database": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
            ],
            "csv_files": [
                "stratified_output/databases/debit_card_specializing/customers.csv",
                "stratified_output/databases/debit_card_specializing/gasstations.csv",
                "stratified_output/databases/debit_card_specializing/products.csv",
                "stratified_output/databases/debit_card_specializing/yearmonth.csv",
                "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
            ],
            "type": "sqlite"
        },
        "schemas": {
            "name": "debit_card_specializing",
            "path": [
                "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
            ],
            "type": "csv"
        },
        "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
        "sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
        "difficulty": "challenging",
        "question_analysis": {
            "char_length": 108,
            "word_length": 19,
            "entities": [
                {
                    "text": "634.8",
                    "label": "CARDINAL",
                    "start": 26,
                    "end": 31
                },
                {
                    "text": "Year 2012 to 2013",
                    "label": "DATE",
                    "start": 90,
                    "end": 107
                }
            ],
            "entity_types": [
                "DATE",
                "CARDINAL"
            ],
            "has_entities": true,
            "numbers": [
                "634.8",
                "2012",
                "2013"
            ],
            "has_numbers": true,
            "has_negation": false,
            "negation_words": [],
            "comparatives": [],
            "has_comparatives": false,
            "superlatives": [],
            "has_superlatives": false,
            "table_overlap_count": 0,
            "table_overlap_lemma_count": 0,
            "column_overlap_count": 1,
            "column_overlap_lemma_count": 1
        },
        "sql_analysis": {
            "char_length": 389,
            "tables_count": 3,
            "tables": [
                "gasstations",
                "transactions_1k",
                "yearmonth"
            ],
            "join_count": 1,
            "where_conditions": 2,
            "subquery_count": 1,
            "clauses_count": 0,
            "clause_types": [],
            "aggregation_function_count": 3,
            "aggregation_functions": [
                "SUM"
            ],
            "select_columns": 1
        }
    }
]