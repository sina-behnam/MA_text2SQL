{
  "id": 1481,
  "dataset": "bird",
  "database": {
    "name": "debit_card_specializing",
    "path": [
      "stratified_output/databases/debit_card_specializing/debit_card_specializing.sqlite"
    ],
    "csv_files": [
      "stratified_output/databases/debit_card_specializing/customers.csv",
      "stratified_output/databases/debit_card_specializing/gasstations.csv",
      "stratified_output/databases/debit_card_specializing/products.csv",
      "stratified_output/databases/debit_card_specializing/yearmonth.csv",
      "stratified_output/databases/debit_card_specializing/transactions_1k.csv"
    ],
    "type": "sqlite"
  },
  "schemas": {
    "name": "debit_card_specializing",
    "path": [
      "stratified_output/schemas/debit_card_specializing/debit_card_specializing.csv"
    ],
    "type": "csv"
  },
  "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
  "sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
  "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
  "difficulty": "challenging",
  "question_analysis": {
    "char_length": 182,
    "word_length": 34,
    "entities": [
      {
        "text": "annual",
        "label": "DATE",
        "start": 30,
        "end": 36
      },
      {
        "text": "CZK",
        "label": "ORG",
        "start": 119,
        "end": 122
      },
      {
        "text": "2013",
        "label": "DATE",
        "start": 127,
        "end": 131
      },
      {
        "text": "SME",
        "label": "ORG",
        "start": 140,
        "end": 143
      },
      {
        "text": "LAM",
        "label": "ORG",
        "start": 148,
        "end": 151
      },
      {
        "text": "LAM",
        "label": "ORG",
        "start": 153,
        "end": 156
      },
      {
        "text": "KAM",
        "label": "ORG",
        "start": 161,
        "end": 164
      },
      {
        "text": "KAM",
        "label": "ORG",
        "start": 170,
        "end": 173
      },
      {
        "text": "SME",
        "label": "ORG",
        "start": 178,
        "end": 181
      }
    ],
    "entity_types": [
      "ORG",
      "DATE"
    ],
    "has_entities": true,
    "numbers": [
      "2013"
    ],
    "has_numbers": true,
    "has_negation": false,
    "negation_words": [],
    "comparatives": [],
    "has_comparatives": false,
    "superlatives": [
      "least"
    ],
    "has_superlatives": true,
    "table_overlap_count": 1,
    "table_overlap_lemma_count": 0,
    "column_overlap_count": 1,
    "column_overlap_lemma_count": 1
  },
  "sql_analysis": {
    "char_length": 735,
    "tables_count": 2,
    "tables": [
      "customers",
      "yearmonth"
    ],
    "join_count": 1,
    "where_conditions": 4,
    "subquery_count": 1,
    "clauses_count": 0,
    "clause_types": [],
    "aggregation_function_count": 13,
    "aggregation_functions": [
      "COUNT",
      "SUM",
      "MIN"
    ],
    "select_columns": 3
  },
  "inference_results": {
    "has_prediction": true,
    "model": {
      "model_name": "meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
      "model_type": "together_ai",
      "timestamp": "2025-05-10T15:42:14.218700"
    },
    "predicted_output": {
      "generated_sql": "WITH filtered_data AS (SELECT c.CustomerID, c.Segment, y.Consumption, y.Date FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'CZK' AND y.Date LIKE '2013%'), avg_consumption AS (SELECT Segment, AVG(Consumption) AS avg_consumption FROM filtered_data GROUP BY Segment) SELECT (SELECT avg_consumption FROM avg_consumption WHERE Segment = 'SME') - (SELECT avg_consumption FROM avg_consumption WHERE Segment = 'LAM') AS SME_LAM, (SELECT avg_consumption FROM avg_consumption WHERE Segment = 'LAM') - (SELECT avg_consumption FROM avg_consumption WHERE Segment = 'KAM') AS LAM_KAM, (SELECT avg_consumption FROM avg_consumption WHERE Segment = 'KAM') - (SELECT avg_consumption FROM avg_consumption WHERE Segment = 'SME') AS KAM_SME FROM avg_consumption LIMIT 1",
      "execution_correct": false,
      "execution_error": "",
      "exact_match": false,
      "semantic_equivalent": false,
      "semantic_explanation": "The Gold SQL Query filters the consumption to the minimum consumption value across all records in the yearmonth table, whereas the Generated SQL Query calculates the average consumption for each segment without considering the minimum consumption filter. This difference in logic means the two queries are not semantically equivalent."
    }
  }
}